#####################################################################
#
# CSCB58 Winter 2025 Assembly Final Project
# University of Toronto, Scarborough
#
# Student: Yaseen Sadat, 1010358596, sadatyas, yaseen.sadat@mail.utoronto.ca
#
# Bitmap Display Configuration:
# - Unit width in pixels: 4
# - Unit height in pixels: 4
# - Display width in pixels: 512
# - Display height in pixels: 256
# - Base Address for Display: 0x10008000 ($gp)
#
# Milestones reached:
# - Milestone 1
#
# Approved features for Milestone 3:
# 1. (None yet – coming soon!)
#
# Additional information:
# - Step-by-step build in progress
#
#####################################################################

.eqv BASE_ADDRESS 0x10008000    # Framebuffer base address

.data
# Player position and physics variables
player_row:      .word 60        # Y-position (row)
player_col:      .word 2         # X-position (column)
player_velocity: .word 0         # Y velocity (positive = falling, negative = jumping up)
is_jumping:      .word 0         # 1 if in the air, 0 if grounded

# Buffer to store the 3×3 background region under the player (9 words = 36 bytes)
player_bg_buffer: .space 36

# Temporary storage for the current player's base position
current_player_row: .word 0
current_player_col: .word 0

# Multi-shade reds for a more detailed red planet (top left)
darkest_red:   .word 0x008B0000   # Dark red
dark_red:      .word 0x00B22222   # Firebrick
mid_red:       .word 0x00CD5C5C   # IndianRed
light_red:     .word 0x00FA8072   # Salmon

# -------------------------------------------------------------------
# Earth planet colors (for an Earth‐like planet, top right):
#   - earth_dark:    dark ocean
#   - earth_ocean:   bright ocean blue
#   - earth_land:    green (land)
#   - earth_clouds:  white (clouds)
# -------------------------------------------------------------------
earth_dark:    .word 0x00004080   # Dark ocean (R=0, G=64, B=128)
earth_ocean:   .word 0x000080FF   # Ocean blue (R=0, G=128, B=255)
earth_land:    .word 0x00008000   # Land green (R=0, G=128, B=0)
earth_clouds:  .word 0x00FFFFFF   # Clouds (white)

.text
main:
    ################################################################
    # INITIALIZE CONSTANTS
    ################################################################
    li   $s0, BASE_ADDRESS        # Framebuffer base address
    li   $s1, 0x00808080          # Grey color for platforms
    li   $s2, 0x00FF0000          # Red color for player
    li   $s3, 0x00000080          # Dark blue background

    ################################################################
    # DRAW BACKGROUND (64 rows × 128 cols)
    ################################################################
    li   $t4, 0                 # row = 0
bg_row_loop:
    li   $t5, 0                 # col = 0
bg_col_loop:
    mul  $t6, $t4, 512          # row offset: 512 bytes per row
    mul  $t7, $t5, 4            # column offset: 4 bytes per unit
    add  $t8, $s0, $t6          # base address + row offset
    add  $t8, $t8, $t7          # + column offset
    sw   $s3, 0($t8)            # set pixel to dark blue
    addi $t5, $t5, 1
    blt  $t5, 128, bg_col_loop
    addi $t4, $t4, 1
    blt  $t4, 64, bg_row_loop

################################################################
# DRAW STARS (plus-shaped, 4x4 pixel stars, each row has unique spacing)
################################################################

# Row 1
li $s4, 4
li $s5, 4
li $t8, 20
jal draw_star_row

# Row 2
li $s4, 20
li $s5, 10
li $t8, 15
jal draw_star_row

# Row 3
li $s4, 36
li $s5, 2
li $t8, 20
jal draw_star_row

# Row 4
li $s4, 52
li $s5, 8
li $t8, 18
jal draw_star_row

j stars_done

################################################################
# Subroutine: draw_star_row
# $s4 = fixed row, $s5 = starting col, $t8 = column gap
################################################################
draw_star_row:
    li $t0, 124              # Max col
    move $t7, $s5            # Use $t7 as current star col

next_star:
    bgt $t7, $t0, end_star_row
    li  $t9, 0x00FFFF00      # Yellow color

    # === Vertical Line of Plus ===
    li   $t1, 0
draw_v:
    bgt  $t1, 2, done_v
    add  $t2, $s4, $t1         # row = base_row + offset
    addi $t3, $t7, 1           # col = base_col + 1
    mul  $t4, $t2, 512         # row offset
    mul  $t5, $t3, 4           # col offset (word aligned)
    add  $t6, $s0, $t4
    add  $t6, $t6, $t5
    sw   $t9, 0($t6)
    addi $t1, $t1, 1
    j draw_v
done_v:

    # === Horizontal Line of Plus ===
    li $t1, 0
draw_h:
    bgt $t1, 2, done_h
    addi $t2, $s4, 1           # fixed center row
    add  $t3, $t7, $t1         # col = base_col + offset
    mul  $t4, $t2, 512
    mul  $t5, $t3, 4
    add  $t6, $s0, $t4
    add  $t6, $t6, $t5
    sw   $t9, 0($t6)
    addi $t1, $t1, 1
    j draw_h
done_h:

    add $t7, $t7, $t8          # Move to next star col
    j next_star

end_star_row:
    jr $ra

stars_done:


    ################################################################
    # DRAW RED PLANET (TOP LEFT, swirl pattern)
    ################################################################
    li   $t0, 2         # red planet base row
    li   $t1, 2         # red planet base col
    li   $t2, 24        # bounding box size
    li   $t3, 12        # radius
    addu $t8, $t1, $t3  # center_col = base col + 12
    addu $t9, $t0, $t3  # center_row = base row + 12

    li   $t4, 0         # Outer loop counter (i)
planet_row_loop:
    bge  $t4, $t2, planet_done
    addu $t6, $t0, $t4      # current_row = base row + i
    li   $t5, 0           # Inner loop counter (j)
planet_col_loop:
    bge  $t5, $t2, planet_next_row
    addu $t7, $t1, $t5      # current_col = base col + j

    sub  $a0, $t7, $t8      # dx = current_col - center_col
    sub  $a1, $t6, $t9      # dy = current_row - center_row
    mul  $v1, $a0, $a0      # dx^2
    mul  $t3, $a1, $a1      # dy^2 (overwrite $t3 temporarily)
    addu $v1, $v1, $t3      # distance^2
    li   $t3, 144          # radius^2 (12^2)
    bgt  $v1, $t3, planet_skip_pixel

    sll  $v0, $a1, 1       # compute pattern: (2*dy + dx) >> 2
    addu $v0, $v0, $a0
    sra  $v0, $v0, 2
    andi $v0, $v0, 3      # mod 4

    li   $t3, 0
    beq  $v0, $zero, pick_darkest
    li   $t3, 1
    beq  $v0, $t3, pick_dark
    li   $t3, 2
    beq  $v0, $t3, pick_mid
pick_light:
    lw   $t3, light_red
    j    planet_set_pixel
pick_mid:
    lw   $t3, mid_red
    j    planet_set_pixel
pick_dark:
    lw   $t3, dark_red
    j    planet_set_pixel
pick_darkest:
    lw   $t3, darkest_red

planet_set_pixel:
    mul  $v1, $t6, 512         # row offset in bytes
    sll  $a0, $t7, 2           # col offset = col*4
    addu $v1, $s0, $v1        # base + row offset
    addu $v1, $v1, $a0        # final pixel address
    sw   $t3, 0($v1)          # store chosen red color

planet_skip_pixel:
    addi $t5, $t5, 1          # j++
    j    planet_col_loop
planet_next_row:
    addi $t4, $t4, 1          # i++
    j    planet_row_loop
planet_done:

    ################################################################
    # DRAW EARTH-LIKE PLANET (TOP RIGHT, swirl pattern)
    # - Bounding box: 24×24, Radius = 12
    # - Base coordinates chosen so the planet appears in the top right.
    ################################################################
    li   $t0, 2         # earth planet base row
    li   $t1, 102       # earth planet base col (fits in 128 cols)
    li   $t2, 24        # bounding box size
    li   $t3, 12        # radius
    addu $t8, $t1, $t3  # center_col = base col + 12
    addu $t9, $t0, $t3  # center_row = base row + 12

    li   $t4, 0         # Outer loop counter (i) for earth planet
earth_row_loop:
    bge  $t4, $t2, earth_done
    addu $t6, $t0, $t4      # current_row = earth base row + i
    li   $t5, 0           # Inner loop counter (j)
earth_col_loop:
    bge  $t5, $t2, earth_next_row
    addu $t7, $t1, $t5      # current_col = earth base col + j

    sub  $a0, $t7, $t8      # dx = current_col - center_col
    sub  $a1, $t6, $t9      # dy = current_row - center_row
    mul  $v1, $a0, $a0      # dx^2
    mul  $t3, $a1, $a1      # dy^2 (temporary overwrite of $t3)
    addu $v1, $v1, $t3      # distance^2
    li   $t3, 144          # 12^2 = 144
    bgt  $v1, $t3, earth_skip_pixel

    sll  $v0, $a1, 1       # pattern: (2*dy + dx) >> 2
    addu $v0, $v0, $a0
    sra  $v0, $v0, 2
    andi $v0, $v0, 3      # mod 4

    li   $t3, 0
    beq  $v0, $zero, pick_earth_dark
    li   $t3, 1
    beq  $v0, $t3, pick_earth_ocean
    li   $t3, 2
    beq  $v0, $t3, pick_earth_land
    # Else: pick clouds
pick_earth_clouds:
    lw   $t3, earth_clouds
    j    earth_set_pixel
pick_earth_land:
    lw   $t3, earth_land
    j    earth_set_pixel
pick_earth_ocean:
    lw   $t3, earth_ocean
    j    earth_set_pixel
pick_earth_dark:
    lw   $t3, earth_dark

earth_set_pixel:
    mul  $v1, $t6, 512      # row offset in bytes
    sll  $a0, $t7, 2        # col offset in bytes
    addu $v1, $s0, $v1      # add base address
    addu $v1, $v1, $a0      # final pixel address
    sw   $t3, 0($v1)        # store chosen earth color

earth_skip_pixel:
    addi $t5, $t5, 1       # j++
    j    earth_col_loop
earth_next_row:
    addi $t4, $t4, 1       # i++
    j    earth_row_loop
earth_done:

################################################################
# DRAW PLATFORMS (A–E)
################################################################
li $t9, 0x00808080       # Grey color (platform color)

# Platform A: row 50, columns 10 to 30
li $t4, 50               # row
li $t5, 10               # start col
platA_loop:
    mul $t6, $t4, 512
    mul $t7, $t5, 4
    add $t8, $s0, $t6
    add $t8, $t8, $t7
    sw  $t9, 0($t8)
    addi $t5, $t5, 1
    blt  $t5, 31, platA_loop

# Platform B: row 40, columns 40 to 70  ← updated
li $t4, 40
li $t5, 40
platB_loop:
    mul $t6, $t4, 512
    mul $t7, $t5, 4
    add $t8, $s0, $t6
    add $t8, $t8, $t7
    sw  $t9, 0($t8)
    addi $t5, $t5, 1
    blt  $t5, 71, platB_loop

# Platform C: row 30, columns 90 to 115
li $t4, 30
li $t5, 90
platC_loop:
    mul $t6, $t4, 512
    mul $t7, $t5, 4
    add $t8, $s0, $t6
    add $t8, $t8, $t7
    sw  $t9, 0($t8)
    addi $t5, $t5, 1
    blt  $t5, 116, platC_loop

# Platform D: row 25, columns 20 to 45  ← updated row and range
li $t4, 25
li $t5, 20
platD_loop:
    mul $t6, $t4, 512
    mul $t7, $t5, 4
    add $t8, $s0, $t6
    add $t8, $t8, $t7
    sw  $t9, 0($t8)
    addi $t5, $t5, 1
    blt  $t5, 46, platD_loop   # stop at col 45

# Platform E: row 45, columns 95 to 120  ← updated range
li $t4, 45
li $t5, 95
platE_loop:
    mul $t6, $t4, 512
    mul $t7, $t5, 4
    add $t8, $s0, $t6
    add $t8, $t8, $t7
    sw  $t9, 0($t8)
    addi $t5, $t5, 1
    blt  $t5, 121, platE_loop   # stop at col 120

    ################################################################
    # INIT PREVIOUS PLAYER POSITION
    ################################################################
    li   $s6, 60
    li   $s7, 2

######################################################################
# MAIN GAME LOOP
######################################################################
game_loop:
    ################################################################
    # 1) Handle Continuous Input
    ################################################################
    li   $t0, 0xffff0000      # MMIO base for keyboard
    lw   $t1, 0($t0)          # key status
    bne  $t1, 1, skip_input   # if no key, skip input handling
    lw   $t2, 4($t0)          # get ASCII code
    li   $t3, 97              # 'a'
    beq  $t2, $t3, move_left
    li   $t3, 100             # 'd'
    beq  $t2, $t3, move_right
    li   $t3, 119             # 'w'
    beq  $t2, $t3, try_jump
skip_input:

    ################################################################
    # 2) Restore Old Player Background from Buffer
    ################################################################
    la   $t3, player_bg_buffer
    li   $t8, 0
restore_bg_loop_rows:
    li   $t9, 0
restore_bg_loop_cols:
    add  $t4, $s6, $t8
    add  $t5, $s7, $t9
    mul  $t6, $t4, 512
    mul  $t7, $t5, 4
    add  $t0, $s0, $t6
    add  $t0, $t0, $t7
    lw   $t1, 0($t3)
    sw   $t1, 0($t0)
    addi $t3, $t3, 4
    addi $t9, $t9, 1
    blt  $t9, 3, restore_bg_loop_cols
    addi $t8, $t8, 1
    blt  $t8, 3, restore_bg_loop_rows

    ################################################################
    # 3) Apply Gravity
    ################################################################
    jal  apply_gravity

    ################################################################
    # 4) Clamp & Save New Player Position
    ################################################################
    la   $t0, player_row
    la   $t1, player_col
    lw   $t4, 0($t0)
    lw   $t5, 0($t1)

    li   $t6, 0
    blt  $t4, $t6, fix_top
    li   $t6, 61
    bgt  $t4, $t6, fix_bottom
    j    skip_row_clamp
fix_top:
    li   $t4, 0
    sw   $t4, player_row
    j    skip_row_clamp
fix_bottom:
    li   $t4, 61
    sw   $t4, player_row
skip_row_clamp:

    li   $t6, 0
    blt  $t5, $t6, fix_left
    li   $t6, 125
    bgt  $t5, $t6, fix_right
    j    skip_col_clamp
fix_left:
    li   $t5, 0
    sw   $t5, player_col
    j    skip_col_clamp
fix_right:
    li   $t5, 125
    sw   $t5, player_col
skip_col_clamp:

    lw   $t5, 0($t1)
    la   $t7, current_player_row
    sw   $t4, 0($t7)
    la   $t7, current_player_col
    sw   $t5, 0($t7)

    ################################################################
    # 5) Save New Background into Buffer
    ################################################################
    la   $t3, player_bg_buffer
    li   $t8, 0
save_bg_loop_rows:
    la   $t7, current_player_row
    lw   $t5, 0($t7)
    la   $t7, current_player_col
    lw   $t6, 0($t7)
    li   $t9, 0
save_bg_loop_cols:
    add  $t2, $t5, $t8
    add  $t1, $t6, $t9
    mul  $t2, $t2, 512
    mul  $t1, $t1, 4
    add  $t0, $s0, $t2
    add  $t0, $t0, $t1
    lw   $t4, 0($t0)
    sw   $t4, 0($t3)
    addi $t3, $t3, 4
    addi $t9, $t9, 1
    blt  $t9, 3, save_bg_loop_cols
    addi $t8, $t8, 1
    blt  $t8, 3, save_bg_loop_rows

    ################################################################
    # 6) Draw Player at New Position
    ################################################################
    li   $t8, 0
draw_loop_rows:
    la   $t7, current_player_row
    lw   $t5, 0($t7)
    la   $t7, current_player_col
    lw   $t6, 0($t7)
    li   $t9, 0
draw_loop_cols:
    add  $t2, $t5, $t8
    add  $t1, $t6, $t9
    mul  $t2, $t2, 512
    mul  $t1, $t1, 4
    add  $t0, $s0, $t2
    add  $t0, $t0, $t1
    sw   $s2, 0($t0)
    addi $t9, $t9, 1
    blt  $t9, 3, draw_loop_cols
    addi $t8, $t8, 1
    blt  $t8, 3, draw_loop_rows

    ################################################################
    # 7) Update Previous Player Position
    ################################################################
    la   $t7, current_player_row
    lw   $t4, 0($t7)
    move $s6, $t4
    la   $t7, current_player_col
    lw   $t4, 0($t7)
    move $s7, $t4

    ################################################################
    # 8) Frame Delay
    ################################################################
    li   $v0, 32
    li   $a0, 40
    syscall

    j game_loop

######################################################################
# INPUT HANDLERS
######################################################################
move_left:
    lw   $t4, player_col
    li   $t5, 2
    ble  $t4, $t5, done_moving
    addi $t4, $t4, -1
    sw   $t4, player_col
done_moving:
    j skip_input

move_right:
    lw   $t4, player_col
    li   $t5, 125
    bge  $t4, $t5, done_moving2
    addi $t4, $t4, 1
    sw   $t4, player_col
done_moving2:
    j skip_input

try_jump:
    la   $t0, is_jumping
    lw   $t1, 0($t0)
    bnez $t1, game_loop
    li   $t1, 1
    sw   $t1, 0($t0)
    la   $t2, player_velocity
    li   $t3, -5
    sw   $t3, 0($t2)
    j skip_input

######################################################################
# GRAVITY ENGINE
######################################################################
apply_gravity:
    la   $t0, is_jumping
    lw   $t1, 0($t0)
    la   $t2, player_row
    lw   $t3, 0($t2)
    la   $t4, player_velocity
    lw   $t5, 0($t4)
    bnez $t1, apply_physics
    li   $t6, 61
    beq  $t3, $t6, done_gravity
    li   $t1, 1
    sw   $t1, 0($t0)
    li   $t5, 1
    sw   $t5, 0($t4)
    j    apply_physics

apply_physics:
    add  $t3, $t3, $t5
    bgt  $t3, 61, set_floor
    sw   $t3, 0($t2)
    addi $t5, $t5, 1
    sw   $t5, 0($t4)
    j    done_gravity

set_floor:
    li   $t3, 61
    sw   $t3, 0($t2)
    li   $t5, 0
    sw   $t5, 0($t4)
    li   $t1, 0
    sw   $t1, 0($t0)
done_gravity:
    jr   $ra

######################################################################
# SAFEGUARD HALT LOOP
######################################################################
end:
    j end
   
